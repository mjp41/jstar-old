(********************************************************
   This file is part of jStar
        src/jimplefront/jimple_evaluator.mli
   Release
        $Release$
   Version
        $Rev$
   $Copyright$

   jStar is distributed under a BSD license,  see,
      LICENSE.txt
 ********************************************************)
(* NOTE: generated by scripts/syb *)
open Jimple_global_types
open Jparsetree
open Printing
open Spec
open Vars
class virtual ['a] evaluator default_value = object(self)
  method eval_array_brackets : array_brackets -> 'a = self#eval_string
  method eval_array_descriptor : array_descriptor -> 'a =
    function None -> default_value| Some _1 -> self#eval_immediate _1
  method eval_at_identifier : at_identifier -> 'a = self#eval_string
  method eval_binop : binop -> 'a = function _ -> default_value
  method eval_bool_expr : bool_expr -> 'a = function _ -> default_value
  method eval_case_label : case_label -> 'a =
    function Case_label_default -> default_value
    | Case_label(_1, _3) ->
      ((List.fold_left self#combine) default_value)
       [self#eval_sign _1; self#eval_int _3]
    
  method eval_case_statement : case_statement -> 'a =
    function
    Case_stmt(_1, _3) ->
    ((List.fold_left self#combine) default_value)
     [self#eval_case_label _1; self#eval_label_name _3]
  method eval_catch_clause : catch_clause -> 'a =
    function
    Catch_clause(_1, _3, _5, _7) ->
    ((List.fold_left self#combine) default_value)
     [self#eval_class_name _1; self#eval_label_name _3
     ; self#eval_label_name _5; self#eval_label_name _7]
    
  method eval_class_name : class_name -> 'a =
    function Quoted_clname _1 -> self#eval_string _1
    | Identifier_clname _1 -> self#eval_string _1
    | Full_identifier_clname _1 -> self#eval_string _1
  method eval_constant : constant -> 'a =
    function
    Int_const(_1, _3) ->
    ((List.fold_left self#combine) default_value)
     [self#eval_sign _1; self#eval_int _3]
    | Int_const_long(_1, _3) ->
      ((List.fold_left self#combine) default_value)
       [self#eval_sign _1; self#eval_int _3]
    | Float_const(_1, _3) ->
      ((List.fold_left self#combine) default_value)
       [self#eval_sign _1; self#eval_float _3]
    | String_const _1 -> self#eval_string _1
    | Clzz_const _1 -> self#eval_string _1| Null_const -> default_value
  method eval_declaration : declaration -> 'a =
    function
    Declaration(_1, _4) ->
    ((List.fold_left self#combine) default_value)
     [(function None -> default_value| Some _2 -> self#eval_j_type _2) _1
     ; ((List.fold_left self#combine) default_value)
        ((List.map self#eval_name) _4)
     ]
    
  method eval_declaration_or_statement : declaration_or_statement -> 'a =
    function DOS_dec _1 -> self#eval_declaration _1
    | DOS_stm _1 -> self#eval_statement _1
  method eval_ensures_clause : ensures_clause -> 'a = self#eval_method_body
  method eval_expression : expression -> 'a =
    function New_simple_exp _1 -> self#eval_j_base_type _1
    | New_array_exp(_1, _3) ->
      ((List.fold_left self#combine) default_value)
       [self#eval_nonvoid_type _1; self#eval_fixed_array_descriptor _3]
    | New_multiarray_exp(_1, _3) ->
      ((List.fold_left self#combine) default_value)
       [self#eval_j_base_type _1
       ; ((List.fold_left self#combine) default_value)
          ((List.map self#eval_array_descriptor) _3)
       ]
      | Cast_exp(_1, _3) ->
        ((List.fold_left self#combine) default_value)
         [self#eval_nonvoid_type _1; self#eval_immediate _3]
    | Instanceof_exp(_1, _3) ->
      ((List.fold_left self#combine) default_value)
       [self#eval_immediate _1; self#eval_nonvoid_type _3]
    | Binop_exp(_1, _3, _5) ->
      ((List.fold_left self#combine) default_value)
       [self#eval_binop _1; self#eval_immediate _3; self#eval_immediate _5]
    | Unop_exp(_1, _3) ->
      ((List.fold_left self#combine) default_value)
       [self#eval_unop _1; self#eval_immediate _3]
    | Invoke_exp _1 -> self#eval_invoke_expr _1
    | Immediate_exp _1 -> self#eval_immediate _1
    | Reference_exp _1 -> self#eval_reference _1
  method eval_extends_clause : extends_clause -> 'a =
    function
    _1 ->
    ((List.fold_left self#combine) default_value)
     ((List.map self#eval_class_name) _1)
  method eval_field_signature : field_signature -> 'a =
    function
    _1, _3, _5 ->
    ((List.fold_left self#combine) default_value)
     [self#eval_class_name _1; self#eval_j_type _3; self#eval_name _5]
  method eval_fixed_array_descriptor : fixed_array_descriptor -> 'a =
    self#eval_immediate
  method eval_float : float -> 'a = function _ -> default_value
  method eval_full_identifier : full_identifier -> 'a = self#eval_string
  method eval_identifier : identifier -> 'a = self#eval_string
  method eval_immediate : immediate -> 'a =
    function Immediate_local_name _1 -> self#eval_name _1
    | Immediate_constant _1 -> self#eval_constant _1
  method eval_implements_clause : implements_clause -> 'a =
    function
    _1 ->
    ((List.fold_left self#combine) default_value)
     ((List.map self#eval_class_name) _1)
  method eval_int : int -> 'a = function _ -> default_value
  method eval_invoke_expr : invoke_expr -> 'a =
    function
    Invoke_nostatic_exp(_1, _3, _5, _7) ->
    ((List.fold_left self#combine) default_value)
     [self#eval_nonstatic_invoke _1; self#eval_name _3
     ; self#eval_signature _5
     ; ((List.fold_left self#combine) default_value)
        ((List.map self#eval_immediate) _7)
     ]
    | Invoke_static_exp(_1, _3) ->
      ((List.fold_left self#combine) default_value)
       [self#eval_signature _1
       ; ((List.fold_left self#combine) default_value)
          ((List.map self#eval_immediate) _3)
       ]
      
  method eval_j_base_type : j_base_type -> 'a =
    function Boolean -> default_value| Byte -> default_value
    | Char -> default_value| Short -> default_value| Int -> default_value
    | Long -> default_value| Float -> default_value| Double -> default_value
    | Null_type -> default_value| Class_name _1 -> self#eval_class_name _1
  method eval_j_file_type : j_file_type -> 'a = function _ -> default_value
  method eval_j_type : j_type -> 'a =
    function Void -> default_value| Non_void _1 -> self#eval_nonvoid_type _1
  method eval_jimple_file : jimple_file -> 'a =
    function
    JFile(_1, _4, _6, _8, _10, _12) ->
    ((List.fold_left self#combine) default_value)
     [((List.fold_left self#combine) default_value)
       ((List.map self#eval_modifier) _1)
     ; self#eval_j_file_type _4; self#eval_class_name _6
     ; self#eval_extends_clause _8; self#eval_implements_clause _10
     ; ((List.fold_left self#combine) default_value)
        ((List.map self#eval_member) _12)
     ]
    
  method eval_label_name : label_name -> 'a = self#eval_identifier
  method eval_list_class_file : list_class_file -> 'a =
    function
    ListClassFile _1 ->
    ((List.fold_left self#combine) default_value)
     ((List.map self#eval_string) _1)
  method eval_local_var : local_var -> 'a =
    function
    _1, _4 ->
    ((List.fold_left self#combine) default_value)
     [(function None -> default_value| Some _2 -> self#eval_j_type _2) _1
     ; self#eval_name _4]
    
  method eval_member : member -> 'a =
    function
    Field(_1, _4, _6) ->
    ((List.fold_left self#combine) default_value)
     [((List.fold_left self#combine) default_value)
       ((List.map self#eval_modifier) _1)
     ; self#eval_j_type _4; self#eval_name _6]
    | Method(_1, _4, _6, _8, _11, _13, _15, _17, _19) ->
      ((List.fold_left self#combine) default_value)
       [((List.fold_left self#combine) default_value)
         ((List.map self#eval_modifier) _1)
       ; self#eval_j_type _4; self#eval_name _6
       ; ((List.fold_left self#combine) default_value)
          ((List.map self#eval_parameter) _8)
       ; self#eval_throws_clause _11; self#eval_requires_clause _13
       ; self#eval_old_clauses _15; self#eval_ensures_clause _17
       ; self#eval_method_body _19]
      
  method eval_method_body : method_body -> 'a =
    function None -> default_value
    | Some _1 ->
      (function
      _2, _5 ->
      ((List.fold_left self#combine) default_value)
       [((List.fold_left self#combine) default_value)
         ((List.map self#eval_declaration_or_statement) _2)
       ; ((List.fold_left self#combine) default_value)
          ((List.map self#eval_catch_clause) _5)
       ]
      ) _1
    
  method eval_method_signature : method_signature -> 'a =
    function
    _1, _3, _5, _7 ->
    ((List.fold_left self#combine) default_value)
     [self#eval_class_name _1; self#eval_j_type _3; self#eval_name _5
     ; ((List.fold_left self#combine) default_value)
        ((List.map self#eval_parameter) _7)
     ]
    
  method eval_method_signature_short : method_signature_short -> 'a =
    function
    _1, _4, _6, _8 ->
    ((List.fold_left self#combine) default_value)
     [((List.fold_left self#combine) default_value)
       ((List.map self#eval_modifier) _1)
     ; self#eval_j_type _4; self#eval_name _6
     ; ((List.fold_left self#combine) default_value)
        ((List.map self#eval_parameter) _8)
     ]
    
  method eval_modifier : modifier -> 'a = function _ -> default_value
  method eval_name : name -> 'a =
    function Quoted_name _1 -> self#eval_string _1
    | Identifier_name _1 -> self#eval_string _1
  method eval_nodekind : nodekind -> 'a = function _ -> default_value
  method eval_nonstatic_invoke : nonstatic_invoke -> 'a =
    function _ -> default_value
  method eval_nonvoid_type : nonvoid_type -> 'a =
    function
    Base(_1, _3) ->
    ((List.fold_left self#combine) default_value)
     [self#eval_j_base_type _1
     ; ((List.fold_left self#combine) default_value)
        ((List.map self#eval_array_brackets) _3)
     ]
    | Quoted(_1, _3) ->
      ((List.fold_left self#combine) default_value)
       [self#eval_quoted_name _1
       ; ((List.fold_left self#combine) default_value)
          ((List.map self#eval_array_brackets) _3)
       ]
      | Ident_NVT(_1, _3) ->
        ((List.fold_left self#combine) default_value)
         [self#eval_identifier _1
         ; ((List.fold_left self#combine) default_value)
            ((List.map self#eval_array_brackets) _3)
         ]
        | Full_ident_NVT(_1, _3) ->
          ((List.fold_left self#combine) default_value)
           [self#eval_full_identifier _1
           ; ((List.fold_left self#combine) default_value)
              ((List.map self#eval_array_brackets) _3)
           ]
          
  method eval_old_clauses : old_clauses -> 'a =
    function
    _1 ->
    ((List.fold_left self#combine) default_value)
     ((List.map self#eval_method_body) _1)
  method eval_parameter : parameter -> 'a = self#eval_nonvoid_type
  method eval_parameter_named_option : parameter_named_option -> 'a =
    function
    _1, _3 ->
    ((List.fold_left self#combine) default_value)
     [self#eval_nonvoid_type _1
     ; (function None -> default_value| Some _4 -> self#eval_identifier _4)
        _3
     ]
    
  method eval_quoted_name : quoted_name -> 'a = self#eval_string
  method eval_reference : reference -> 'a =
    function
    Array_ref(_1, _3) ->
    ((List.fold_left self#combine) default_value)
     [self#eval_identifier _1; self#eval_immediate _3]
    | Field_local_ref(_1, _3) ->
      ((List.fold_left self#combine) default_value)
       [self#eval_name _1; self#eval_signature _3]
    | Field_sig_ref _1 -> self#eval_signature _1
  method eval_requires_clause : requires_clause -> 'a = self#eval_method_body
  method eval_sign : sign -> 'a = function _ -> default_value
  method eval_signature : signature -> 'a =
    function Method_signature _1 -> self#eval_method_signature _1
    | Field_signature _1 -> self#eval_field_signature _1
  method eval_source_location : source_location -> 'a =
    function _ -> default_value
  method eval_spec : spec -> 'a = function _ -> default_value
  method eval_statement : statement -> 'a =
    function
    _1, _3 ->
    ((List.fold_left self#combine) default_value)
     [self#eval_statement_inner _1
     ; (function None -> default_value
       | Some _4 -> self#eval_source_location _4) _3
     ]
    
  method eval_statement_inner : statement_inner -> 'a =
    function Label_stmt _1 -> self#eval_label_name _1
    | Breakpoint_stmt -> default_value
    | Entermonitor_stmt _1 -> self#eval_immediate _1
    | Exitmonitor_stmt _1 -> self#eval_immediate _1
    | Tableswitch_stmt(_1, _3) ->
      ((List.fold_left self#combine) default_value)
       [self#eval_immediate _1
       ; ((List.fold_left self#combine) default_value)
          ((List.map self#eval_case_statement) _3)
       ]
      | Lookupswitch_stmt(_1, _3) ->
        ((List.fold_left self#combine) default_value)
         [self#eval_immediate _1
         ; ((List.fold_left self#combine) default_value)
            ((List.map self#eval_case_statement) _3)
         ]
        | Identity_stmt(_1, _3, _5) ->
          ((List.fold_left self#combine) default_value)
           [self#eval_name _1; self#eval_at_identifier _3
           ; self#eval_j_type _5]
          | Identity_no_type_stmt(_1, _3) ->
            ((List.fold_left self#combine) default_value)
             [self#eval_name _1; self#eval_at_identifier _3]
    | Assign_stmt(_1, _3) ->
      ((List.fold_left self#combine) default_value)
       [self#eval_variable _1; self#eval_expression _3]
    | If_stmt(_1, _3) ->
      ((List.fold_left self#combine) default_value)
       [self#eval_expression _1; self#eval_label_name _3]
    | Goto_stmt _1 -> self#eval_label_name _1| Nop_stmt -> default_value
    | Ret_stmt _1 ->
      (function None -> default_value| Some _2 -> self#eval_immediate _2) _1
    | Return_stmt _1 ->
      (function None -> default_value| Some _2 -> self#eval_immediate _2) _1
    | Throw_stmt _1 -> self#eval_immediate _1
    | Invoke_stmt _1 -> self#eval_invoke_expr _1
    | Spec_stmt(_1, _4) ->
      ((List.fold_left self#combine) default_value)
       [((List.fold_left self#combine) default_value)
         ((List.map self#eval_var) _1)
       ; self#eval_spec _4]
      
  method eval_string : string -> 'a = function _ -> default_value
  method eval_throws_clause : throws_clause -> 'a =
    function None -> default_value
    | Some _1 ->
      ((List.fold_left self#combine) default_value)
       ((List.map self#eval_class_name) _1)
    
  method eval_unop : unop -> 'a = function _ -> default_value
  method eval_var : var -> 'a = function _ -> default_value
  method eval_variable : variable -> 'a =
    function Var_ref _1 -> self#eval_reference _1
    | Var_name _1 -> self#eval_name _1
  method virtual combine : 'a -> 'a -> 'a
end
